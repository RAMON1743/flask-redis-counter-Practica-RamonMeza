version: 2.1

orbs:
  python: circleci/python@1.3.0

jobs:
  build:
    docker:
      - image: cimg/python:3.9  # Imagen base de Python que ya incluye Git y SSH
      - image: redis:7  # Imagen de Redis
        name: redis  # Nombre del contenedor de Redis
    environment:
      REDIS_HOST: "redis"  # Nombre del contenedor de Redis
      REDIS_PORT: "6379"   # Puerto de Redis
    steps:
      - checkout  # Revisa el código fuente

      # Instalar Git y SSH si no están instalados
      - run:
          name: Instalar Git y SSH
          command: |
            sudo apt-get update
            sudo apt-get install -y git openssh-client

      # Cambiar permisos y directorio de .ssh para asegurar que se crea en el home del usuario
      - run:
          name: Crear .ssh correctamente
          command: |
            # Crear el directorio ~/.ssh con los permisos adecuados
            mkdir -p /home/circleci/.ssh
            chmod 700 /home/circleci/.ssh

            # Colocar la clave privada SSH
            echo "$SSH_PRIVATE_KEY" > /home/circleci/.ssh/id_rsa
            chmod 600 /home/circleci/.ssh/id_rsa

            # Agregar la clave conocida de GitHub
            ssh-keyscan github.com >> /home/circleci/.ssh/known_hosts
            chmod 644 /home/circleci/.ssh/known_hosts

            # Verificar si el directorio .ssh y la clave están bien configurados
            ls -al /home/circleci/.ssh

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Convertir DOCKERHUB_REPO a minúsculas
          command: echo "export DOCKERHUB_REPO=$(echo $DOCKERHUB_REPO | tr '[:upper:]' '[:lower:]')" >> $BASH_ENV

      - run:
          name: Configurar SECRET_KEY en entorno
          command: echo "export SECRET_KEY=$SECRET_KEY" >> $BASH_ENV

      - run:
          name: Instalar dependencias
          command: pip install --no-cache-dir -r requirements.txt

      - run:
          name: Ejecutar pruebas
          command: pytest --cov=app --cov-report=xml --junitxml=test-results/results.xml

      - run:
          name: Análisis estático de código con pylint
          command: pylint --disable=C0303 app

      - run:
          name: Linting con flake8
          command: flake8 app

      - run:
          name: Construir imagen Docker
          command: docker build -t $DOCKERHUB_REPO:latest .

      # Guardar artefactos de tests
      - store_test_results:
          path: test-results
          
      # Guardar artefactos adicionales
      - store_artifacts:
          path: test-results
          destination: test-reports

  push_docker:
    docker:
      - image: cimg/python:3.9  # Usar imagen de Python con Git y SSH preinstalados
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Convertir DOCKERHUB_REPO a minúsculas
          command: echo "export DOCKERHUB_REPO=$(echo $DOCKERHUB_REPO | tr '[:upper:]' '[:lower:]')" >> $BASH_ENV
      - run:
          name: Iniciar sesión en Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Construir imagen Docker
          command: docker build -t $DOCKERHUB_REPO:latest .
      - run:
          name: Etiquetar imagen con el commit SHA
          command: docker tag $DOCKERHUB_REPO:latest $DOCKERHUB_REPO:${CIRCLE_SHA1}
      - run:
          name: Subir imagen a Docker Hub
          command: |
            docker push $DOCKERHUB_REPO:latest
            docker push $DOCKERHUB_REPO:${CIRCLE_SHA1}

  deploy_to_k8s:
    docker:
      - image: bitnami/kubectl:latest
    steps:
      - checkout
      - run:
          name: Configurar acceso a Kubernetes
          command: |
            echo "$KUBECONFIG_CONTENT" | base64 --decode > /root/.kube/config
      - run:
          name: Aplicar cambios en Kubernetes con ArgoCD
          command: |
            argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --insecure
            argocd app sync flask-redis-app
            argocd app wait flask-redis-app --health

  vulnerability_scan:
    docker:
      - image: cimg/python:3.9  # Usar imagen de Python con Git y SSH preinstalados
    steps:
      - checkout
      - run:
          name: Instalar Node.js y Snyk CLI
          command: |
            sudo apt update
            sudo apt install -y nodejs npm
            mkdir -p "$HOME/.npm-global/bin"
            npm config set prefix "$HOME/.npm-global"
            export PATH="$HOME/.npm-global/bin:$PATH"
            echo 'export PATH="$HOME/.npm-global/bin:$PATH"' >> $BASH_ENV
            npm install -g snyk
            snyk --version
      - run:
          name: Instalar dependencias del proyecto antes de ejecutar Snyk
          command: pip install --no-cache-dir -r requirements.txt
      - run:
          name: Autenticar con Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Ejecutar análisis de vulnerabilidades
          command: snyk test

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build
      - vulnerability_scan:
          requires:
            - build
      - push_docker:
          requires:
            - build
            - vulnerability_scan
          filters:
            branches:
              only:
                - master
                - main
      - deploy_to_k8s:
          requires:
            - push_docker
          filters:
            branches:
              only:
                - master
                - main
