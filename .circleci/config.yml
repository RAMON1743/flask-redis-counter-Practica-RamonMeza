version: 2.1

orbs:
  python: circleci/python@1.3.0

jobs:
  build:
    docker:
      - image: cimg/python:3.9  # Imagen base de Python
      - image: redis:7  # Imagen de Redis
        name: redis  # Nombre del contenedor de Redis
    environment:
      REDIS_HOST: "redis"  # Nombre del contenedor de Redis
      REDIS_PORT: "6379"   # Puerto de Redis
    steps:
      - checkout  # Revisa el código fuente

      - run:
          name: Cambiar a usuario circleci
          command: |
            sudo chown -R circleci:circleci /home/circleci
            sudo chmod 755 /home/circleci
            sudo su - circleci -c "whoami"

      - run:
          name: Configurar SSH correctamente
          command: |
            sudo su - circleci -c "
              mkdir -p /home/circleci/.ssh
              chmod 700 /home/circleci/.ssh
              echo '$SSH_PRIVATE_KEY' > /home/circleci/.ssh/id_rsa
              chmod 600 /home/circleci/.ssh/id_rsa
              ssh-keyscan github.com >> /home/circleci/.ssh/known_hosts
              chmod 644 /home/circleci/.ssh/known_hosts
            "

      - run:
          name: Configurar Git para usar SSH
          command: |
            sudo su - circleci -c "
              git config --global url.'git@github.com:'.insteadOf 'https://github.com/'
            "

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Instalar dependencias
          command: sudo su - circleci -c "pip install --no-cache-dir -r requirements.txt"

      - run:
          name: Ejecutar pruebas
          command: sudo su - circleci -c "pytest --cov=app --cov-report=xml --junitxml=test-results/results.xml"

      - run:
          name: Análisis estático de código con pylint
          command: sudo su - circleci -c "pylint --disable=C0303 app"

      - run:
          name: Linting con flake8
          command: sudo su - circleci -c "flake8 app"

      - run:
          name: Construir imagen Docker
          command: sudo su - circleci -c "docker build -t $DOCKERHUB_REPO:latest ."

      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-reports

  push_docker:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Iniciar sesión en Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Construir y subir imagen Docker
          command: |
            docker build -t $DOCKERHUB_REPO:latest .
            docker tag $DOCKERHUB_REPO:latest $DOCKERHUB_REPO:${CIRCLE_SHA1}
            docker push $DOCKERHUB_REPO:latest
            docker push $DOCKERHUB_REPO:${CIRCLE_SHA1}

  deploy_to_k8s:
    docker:
      - image: bitnami/kubectl:latest
    steps:
      - run:
          name: Configurar acceso a Kubernetes
          command: |
            export HOME=/home/circleci
            mkdir -p $HOME/.kube
            echo "$KUBECONFIG_CONTENT" | base64 --decode > $HOME/.kube/config
            chmod 600 $HOME/.kube/config
      - run:
          name: Aplicar cambios en Kubernetes con ArgoCD
          command: |
            argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --insecure
            argocd app sync flask-redis-app
            argocd app wait flask-redis-app --health

  vulnerability_scan:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run:
          name: Instalar Node.js y Snyk CLI
          command: |
            sudo apt update
            sudo apt install -y nodejs npm
            npm install -g snyk
            snyk --version
      - run:
          name: Instalar dependencias antes de ejecutar Snyk
          command: sudo su - circleci -c "pip install --no-cache-dir -r requirements.txt"
      - run:
          name: Autenticar con Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Ejecutar análisis de vulnerabilidades
          command: snyk test

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build
      - vulnerability_scan:
          requires:
            - build
      - push_docker:
          requires:
            - build
            - vulnerability_scan
          filters:
            branches:
              only:
                - master
                - main
      - deploy_to_k8s:
          requires:
            - push_docker
          filters:
            branches:
              only:
                - master
                - main
